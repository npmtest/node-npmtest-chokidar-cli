{"/home/travis/build/npmtest/node-npmtest-chokidar-cli/test.js":"/* istanbul instrument in package npmtest_chokidar_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chokidar-cli/lib.npmtest_chokidar_cli.js":"/* istanbul instrument in package npmtest_chokidar_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_chokidar_cli = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_chokidar_cli = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-chokidar-cli/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-chokidar-cli && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_chokidar_cli */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_chokidar_cli\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_chokidar_cli.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_chokidar_cli.rollup.js'] =\n            local.assetsDict['/assets.npmtest_chokidar_cli.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_chokidar_cli.__dirname + '/lib.npmtest_chokidar_cli.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-chokidar-cli/node_modules/chokidar-cli/index.js":"#!/usr/bin/env node\n\nvar childProcess = require('child_process');\nvar Promise = require('bluebird');\nvar _ = require('lodash');\nvar chokidar = require('chokidar');\nvar utils = require('./utils');\n\nvar EVENT_DESCRIPTIONS = {\n    add: 'File added',\n    addDir: 'Directory added',\n    unlink: 'File removed',\n    unlinkDir: 'Directory removed',\n    change: 'File changed'\n};\n\nvar defaultOpts = {\n    debounce: 400,\n    throttle: 0,\n    followSymlinks: false,\n    ignore: null,\n    polling: false,\n    pollInterval: 100,\n    pollIntervalBinary: 300,\n    verbose: false,\n    silent: false,\n    initial: false,\n    command: null\n};\n\nvar VERSION = 'chokidar-cli: ' + require('./package.json').version +\n              '\\nchokidar: ' + require('chokidar/package').version;\n\nvar argv = require('yargs')\n    .usage(\n        'Usage: chokidar <pattern> [<pattern>...] [options]\\n\\n' +\n        '<pattern>:\\n' +\n        'Glob pattern to specify files to be watched.\\n' +\n        'Multiple patterns can be watched by separating patterns with spaces.\\n' +\n        'To prevent shell globbing, write pattern inside quotes.\\n' +\n        'Guide to globs: https://github.com/isaacs/node-glob#glob-primer\\n'\n    )\n    .example('chokidar \"**/*.js\" -c \"npm run build-js\"', 'build when any .js file changes')\n    .example('chokidar \"**/*.js\" \"**/*.less\"', 'output changes of .js and .less files')\n    .demand(1)\n    .option('c', {\n        alias: 'command',\n        describe: 'Command to run after each change. ' +\n                  'Needs to be surrounded with quotes when command contains ' +\n                  'spaces. Instances of `{path}` or `{event}` within the ' +\n                  'command will be replaced by the corresponding values from ' +\n                  'the chokidar event.'\n    })\n    .option('d', {\n        alias: 'debounce',\n        default: defaultOpts.debounce,\n        describe: 'Debounce timeout in ms for executing command',\n        type: 'number'\n    })\n    .option('t', {\n        alias: 'throttle',\n        default: defaultOpts.throttle,\n        describe: 'Throttle timeout in ms for executing command',\n        type: 'number'\n    })\n    .option('s', {\n        alias: 'follow-symlinks',\n        default: defaultOpts.followSymlinks,\n        describe: 'When not set, only the symlinks themselves will be watched ' +\n                  'for changes instead of following the link references and ' +\n                  'bubbling events through the links path',\n        type: 'boolean'\n    })\n    .option('i', {\n        alias: 'ignore',\n        describe: 'Pattern for files which should be ignored. ' +\n                  'Needs to be surrounded with quotes to prevent shell globbing. ' +\n                  'The whole relative or absolute path is tested, not just filename. ' +\n                  'Supports glob patters or regexes using format: /yourmatch/i'\n    })\n    .option('initial', {\n        describe: 'When set, command is initially run once',\n        default: defaultOpts.initial,\n        type: 'boolean'\n    })\n    .option('p', {\n        alias: 'polling',\n        describe: 'Whether to use fs.watchFile(backed by polling) instead of ' +\n                  'fs.watch. This might lead to high CPU utilization. ' +\n                  'It is typically necessary to set this to true to ' +\n                  'successfully watch files over a network, and it may be ' +\n                  'necessary to successfully watch files in other ' +\n                  'non-standard situations',\n        default: defaultOpts.polling,\n        type: 'boolean'\n    })\n    .option('poll-interval', {\n        describe: 'Interval of file system polling. Effective when --polling ' +\n                  'is set',\n        default: defaultOpts.pollInterval,\n        type: 'number'\n    })\n    .option('poll-interval-binary', {\n        describe: 'Interval of file system polling for binary files. ' +\n                  'Effective when --polling is set',\n        default: defaultOpts.pollIntervalBinary,\n        type: 'number'\n    })\n    .option('verbose', {\n        describe: 'When set, output is more verbose and human readable.',\n        default: defaultOpts.verbose,\n        type: 'boolean'\n    })\n    .option('silent', {\n        describe: 'When set, internal messages of chokidar-cli won\\'t be written.',\n        default: defaultOpts.silent,\n        type: 'boolean'\n    })\n    .help('h')\n    .alias('h', 'help')\n    .alias('v', 'version')\n    .version(VERSION)\n    .argv;\n\n\nfunction main() {\n    var userOpts = getUserOpts(argv);\n    var opts = _.merge(defaultOpts, userOpts);\n    startWatching(opts);\n}\n\nfunction getUserOpts(argv) {\n    argv.patterns = argv._;\n    return argv;\n}\n\n// Estimates spent working hours based on commit dates\nfunction startWatching(opts) {\n    var chokidarOpts = createChokidarOpts(opts);\n    var watcher = chokidar.watch(opts.patterns, chokidarOpts);\n\n    var throttledRun = _.throttle(run, opts.throttle);\n    var debouncedRun = _.debounce(throttledRun, opts.debounce);\n    watcher.on('all', function(event, path) {\n        var description = EVENT_DESCRIPTIONS[event] + ':';\n\n        if (opts.verbose) {\n            console.error(description, path);\n        } else {\n            if (!opts.silent) {\n                console.log(event + ':' + path);\n            }\n        }\n\n        // XXX: commands might be still run concurrently\n        if (opts.command) {\n            debouncedRun(\n                opts.command\n                    .replace(/\\{path\\}/ig, path)\n                    .replace(/\\{event\\}/ig, event)\n            );\n        }\n    });\n\n    watcher.on('error', function(error) {\n        console.error('Error:', error);\n        console.error(error.stack);\n    });\n\n    watcher.once('ready', function() {\n        var list = opts.patterns.join('\", \"');\n        if (!opts.silent) {\n            console.error('Watching', '\"' + list + '\" ..');\n        }\n    });\n}\n\nfunction createChokidarOpts(opts) {\n    // Transform e.g. regex ignores to real regex objects\n    opts.ignore = _resolveIgnoreOpt(opts.ignore);\n\n    var chokidarOpts = {\n        followSymlinks: opts.followSymlinks,\n        usePolling: opts.polling,\n        interval: opts.pollInterval,\n        binaryInterval: opts.pollIntervalBinary,\n        ignoreInitial: !opts.initial\n    };\n    if (opts.ignore) chokidarOpts.ignored = opts.ignore;\n\n    return chokidarOpts;\n}\n\n// Takes string or array of strings\nfunction _resolveIgnoreOpt(ignoreOpt) {\n    if (!ignoreOpt) {\n        return ignoreOpt;\n    }\n\n    var ignores = !_.isArray(ignoreOpt) ? [ignoreOpt] : ignoreOpt;\n\n    return _.map(ignores, function(ignore) {\n        var isRegex = ignore[0] === '/' && ignore[ignore.length - 1] === '/';\n        if (isRegex) {\n            // Convert user input to regex object\n            var match = ignore.match(new RegExp('^/(.*)/(.*?)$'));\n            return new RegExp(match[1], match[2]);\n        }\n\n        return ignore;\n    });\n}\n\nfunction run(cmd) {\n    return utils.run(cmd)\n    .catch(function(err) {\n        console.error('Error when executing', cmd);\n        console.error(err.stack);\n    });\n}\n\nmain();\n","/home/travis/build/npmtest/node-npmtest-chokidar-cli/node_modules/chokidar-cli/utils.js":"var childProcess = require('child_process');\nvar _ = require('lodash');\nvar Promise = require('bluebird');\nvar shellQuote = require('shell-quote');\n\n// Try to resolve path to shell.\n// We assume that Windows provides COMSPEC env variable\n// and other platforms provide SHELL env variable\nvar SHELL_PATH = process.env.SHELL || process.env.COMSPEC;\nvar EXECUTE_OPTION = process.env.COMSPEC !== undefined && process.env.SHELL === undefined ? '/c' : '-c';\n\n// XXX: Wrapping tos to a promise is a bit wrong abstraction. Maybe RX suits\n// better?\nfunction run(cmd, opts) {\n    if (!SHELL_PATH) {\n        // If we cannot resolve shell, better to just crash\n        throw new Error('$SHELL environment variable is not set.');\n    }\n\n    opts = _.merge({\n        pipe: true,\n        cwd: undefined,\n        callback: function(child) {\n            // Since we return promise, we need to provide\n            // this callback if one wants to access the child\n            // process reference\n            // Called immediately after successful child process\n            // spawn\n        }\n    }, opts);\n\n    return new Promise(function(resolve, reject) {\n        var child;\n\n        try {\n            child = childProcess.spawn(SHELL_PATH, [EXECUTE_OPTION, cmd], {\n                cwd: opts.cwd,\n                stdio: opts.pipe ? 'inherit' : null\n            });\n        } catch (e) {\n            return Promise.reject(e);\n        }\n\n        opts.callback(child);\n\n        function errorHandler(err) {\n            child.removeListener('close', closeHandler);\n            reject(err);\n        }\n\n        function closeHandler(exitCode) {\n            child.removeListener('error', errorHandler);\n            resolve(exitCode);\n        }\n\n        child.once('error', errorHandler);\n        child.once('close', closeHandler);\n    });\n}\n\nmodule.exports = {\n    run: run\n};\n"}